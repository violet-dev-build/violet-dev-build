name: CI
on:
  schedule:
  - cron: '* */24 * * *'
  workflow_dispatch:
env:
  target_owner: 'project-violet'
  target_repository: 'violet'
jobs:
  app-changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      src: ${{ steps.filter.outputs.src }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ env.target_owner }}/${{ env.target_repository }}
          ref: ${{ github.event.pull_request.head.sha || github.event.merge_group.head_sha }}

      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            src:      
              - ".github/workflows/violet-build.yml"
              - "violet/**"

  app-format:
    needs: app-changes
    if: ${{ needs.app-changes.outputs.src == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: violet
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ env.target_owner }}/${{ env.target_repository }}
          ref: ${{ github.event.pull_request.head.sha || github.event.merge_group.head_sha }}

      - uses: actions/setup-java@v1
        with:
          java-version: "17.x"

      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"
          flutter-version: 3.24.2

      - uses: dtolnay/rust-toolchain@stable

      - name: Formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: Preprocess
        run: |
          cd lib/server
          wget -q ${{ secrets.SECRET_SALT }} || echo 'String getValid(String vToken) { return vToken; }' > salt.dart
          wget -q ${{ secrets.SECRET_WSALT }} || echo 'String getValid(String vToken) { return vToken; }' > wsalt.dart

      - name: Analyze
        run: flutter analyze --no-fatal-infos

  app-ios-build:
    runs-on: macos-latest
    needs: [app-format, app-changes]
    if: ${{ needs.app-changes.outputs.src == 'true' }}
    defaults:
      run:
        working-directory: violet
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ env.target_owner }}/${{ env.target_repository }}
          ref: ${{ github.event.pull_request.head.sha || github.event.merge_group.head_sha }}

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: 3.24.2

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - uses: dtolnay/rust-toolchain@stable

      - name: Preprocess
        run: |
          cd lib/server
          wget -q ${{ secrets.SECRET_SALT }} || echo 'String getValid(String vToken) { return vToken; }' > salt.dart
          wget -q ${{ secrets.SECRET_WSALT }} || echo 'String getValid(String vToken) { return vToken; }' > wsalt.dart
          cd ../..

      - name: Podfile
        run: |
          cd ios
          rm Podfile.lock
          flutter clean
          flutter pub get
          pod install
          pod update
          cd ..

      - name: Build
        run: |
          flutter build ios --release --no-codesign
          mkdir -p Payload
          mv ./build/ios/iphoneos/Runner.app Payload
          zip -r -y Payload.zip Payload/Runner.app
          mv Payload.zip Payload.ipa

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ipa-build
          path: ./violet/Payload.ipa

  app-android-build:
    runs-on: ubuntu-latest
    needs: [app-format, app-changes]
    if: ${{ needs.app-changes.outputs.src == 'true' }}
    defaults:
      run:
        working-directory: violet
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ env.target_owner }}/${{ env.target_repository }}
          ref: ${{ github.event.pull_request.head.sha || github.event.merge_group.head_sha }}

      - uses: actions/setup-java@v1
        with:
          java-version: "17.x"
          
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: 3.24.2

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - uses: dtolnay/rust-toolchain@stable

      - name: Preprocess
        run: |
          cd lib/server
          wget -q ${{ secrets.SECRET_SALT }} || echo 'String getValid(String vToken) { return vToken; }' > salt.dart
          wget -q ${{ secrets.SECRET_WSALT }} || echo 'String getValid(String vToken) { return vToken; }' > wsalt.dart
          cd ../..

      - name: Build
        run: |
          flutter clean
          flutter build apk --release

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: apk-build
          path: ./violet/build/app/outputs/apk/release/app-release.apk
  app-windows-build:
    runs-on: windows-latest
    needs: [app-format, app-changes]
    if: ${{ needs.app-changes.outputs.src == 'true' }}
    defaults:
      run:
        working-directory: violet
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ env.target_owner }}/${{ env.target_repository }}
          ref: ${{ github.event.pull_request.head.sha || github.event.merge_group.head_sha }}

      - uses: actions/setup-java@v1
        with:
          java-version: "17.x"

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: 3.24.2

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - uses: dtolnay/rust-toolchain@stable

      - name: Preprocess
        shell: powershell
        run: |
          cd lib/server
          $secretSaltUrl = "${{ secrets.SECRET_SALT }}"
          $secretWSaltUrl = "${{ secrets.SECRET_WSALT }}"

          # Try downloading SECRET_SALT
          try {
            Invoke-WebRequest -Uri $secretSaltUrl -UseBasicParsing -OutFile "salt.dart"
          } catch {
            "String getValid(String vToken) { return vToken; }" | Out-File -Encoding "UTF8" -FilePath "salt.dart"
          }

          # Try downloading SECRET_WSALT
          try {
            Invoke-WebRequest -Uri $secretWSaltUrl -UseBasicParsing -OutFile "wsalt.dart"
          } catch {
            "String getValid(String vToken) { return vToken; }" | Out-File -Encoding "UTF8" -FilePath "wsalt.dart"
          }
          cd ../..

      - name: Build
        run: |
          flutter clean
          flutter build windows --release
      - name: Archive
        shell: powershell
        run: |
          Compress-Archive -Path ./build/windows/x64/runner/Release/ -DestinationPath ./Windows.zip
          ls

      - name: Upload ZIP
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: ./violet/Windows.zip
  release:
    needs: [ app-android-build, app-ios-build, app-windows-build ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        repository: ${{ env.target_owner }}/${{ env.target_repository }}
        ref: ${{ github.event.pull_request.head.sha || github.event.merge_group.head_sha }}
    - name:
      id: tag
      run: |
        echo "value=$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
    - uses: actions/download-artifact@main
      with:
        name: ipa-build
        path: .
    - uses: actions/download-artifact@main
      with:
        name: apk-build
        path: .
    - uses: actions/download-artifact@main
      with:
        name: windows-build
        path: .
    - name: Create Release
      id: create_release
      uses: actions/create-release@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ steps.tag.outputs.value }}
        release_name: Release ${{ github.ref }}
        body: |
          Changes on this release
        draft: false
        prerelease: false
    - name: Upload Release Asset
      uses: actions/upload-release-asset@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./Payload.ipa
        asset_name: Payload.ipa
        asset_content_type: application/zip
    - name: Upload Release Asset
      uses: actions/upload-release-asset@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./app-release.apk
        asset_name: app-release.apk
        asset_content_type: application/vnd.android.package-archive
    - name: Upload Release Asset
      uses: actions/upload-release-asset@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./Windows.zip
        asset_name: Windows.zip
        asset_content_type: application/zip
        
